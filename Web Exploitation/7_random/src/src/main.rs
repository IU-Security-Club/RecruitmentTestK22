use std::{convert::Infallible, net::SocketAddr, collections::HashMap};

use hyper::{Request, Body, Response, service::{make_service_fn, service_fn}, Server};
use rand::{rngs::StdRng, SeedableRng, RngCore};

const FLAG: &str = "INFORSECIU{flag}";

async fn roll(req: Request<Body>) -> Result<Response<Body>, Infallible> {
    let mut random = StdRng::seed_from_u64(0);
    let lucky_num = random.next_u64();

    let query = if let Some(q) = req.uri().query() {
        q
    } else {
        return Ok(Response::new("Enter lucky number!!!".into()));
    };

    let params = form_urlencoded::parse(query.as_bytes())
        .into_owned()
        .collect::<HashMap<String, String>>();
    let entered_num = if let Some(n) = params.get("num") {
        n
    } else {
        return Ok(Response::new("Enter lucky number!!!".into()));
    };

    match entered_num.parse::<u64>() {
        Ok(num) => {
            if num == lucky_num {
                Ok(Response::new(FLAG.into()))
            } else {
                Ok(Response::new("Not your day!!".into()))
            }
        },
        Err(_) => Ok(Response::new("Invalid number!!".into()))
    }
}

#[tokio::main]
async fn main() {
    let addr = SocketAddr::from(([0, 0, 0, 0], 8080));

    let make_svc = make_service_fn(|_conn| async {
        Ok::<_, Infallible>(service_fn(roll))
    });

    let server = Server::bind(&addr).serve(make_svc);
    println!("Listening on port {}", 8080);

    if let Err(e) = server.await {
        eprintln!("server error: {}", e);
    }
}
