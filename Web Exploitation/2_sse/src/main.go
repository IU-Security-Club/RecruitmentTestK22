package main

import (
	"io"
	"log"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"golang.org/x/exp/slices"
)

type Event struct {
	Message       chan string
	NewClients    chan chan string
	ClosedClients chan chan string
	TotalClients  map[chan string]bool
}

type ClientChan chan string

const flag = "INFORSECIU{flag}"

var registered = []string{}

func main() {
	router := gin.Default()
	stream := NewServer()

	go func() {
		for {
			time.Sleep(time.Second * 20)
			stream.Message <- flag
		}
	}()

	setID := router.Group("/", SetID())

	setID.GET("/", func(c *gin.Context) {
		c.File("index.html")
	})

	setID.POST("/register", func(c *gin.Context) {
		if v, err := c.Cookie("id"); err == nil || v != "" {
			registered = append(registered, v)
		}
	})

	setID.GET("/flag", HeadersMiddleware(), stream.serveHTTP(), func(c *gin.Context) {
		if ch, ok := c.Get("clientChan"); !ok {
			return
		} else if id, ok := c.Get("id"); !ok {
			return
		} else if clientChan, ok := ch.(ClientChan); !ok {
			return
		} else {
			c.Stream(func(w io.Writer) bool {
				if msg, ok := <-clientChan; ok && slices.Contains(registered, id.(string)) {
					c.SSEvent("flag", msg)
					return true
				}
				return false
			})
		}
	})

	router.Run(":8085")
}

func NewServer() (event *Event) {
	event = &Event{
		Message:       make(chan string),
		NewClients:    make(chan chan string),
		ClosedClients: make(chan chan string),
		TotalClients:  make(map[chan string]bool),
	}

	go event.listen()

	return
}

func (stream *Event) listen() {
	for {
		select {
		case client := <-stream.NewClients:
			stream.TotalClients[client] = true
			log.Printf("Client added. %d registered clients", len(stream.TotalClients))

		case client := <-stream.ClosedClients:
			delete(stream.TotalClients, client)
			close(client)
			log.Printf("Removed client. %d registered clients", len(stream.TotalClients))

		case eventMsg := <-stream.Message:
			for clientMessageChan := range stream.TotalClients {
				clientMessageChan <- eventMsg
			}
		}
	}
}

func (stream *Event) serveHTTP() gin.HandlerFunc {
	return func(c *gin.Context) {
		clientChan := make(ClientChan)
		stream.NewClients <- clientChan

		defer func() {
			stream.ClosedClients <- clientChan
		}()

		c.Set("clientChan", clientChan)
		c.Next()
	}
}

func SetID() gin.HandlerFunc {
	return func(c *gin.Context) {
		if v, err := c.Cookie("id"); err != nil || v == "" {
			id := strconv.Itoa(int(time.Now().UnixMilli()))
			c.SetCookie("id", id, 60*60*24, "/", "208.87.135.57", true, true)
			c.Set("id", id)
		} else {
			c.Set("id", v)
		}
	}
}

func HeadersMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Content-Type", "text/event-stream")
		c.Writer.Header().Set("Cache-Control", "no-cache")
		c.Writer.Header().Set("Connection", "keep-alive")
		c.Writer.Header().Set("Transfer-Encoding", "chunked")
		c.Next()
	}
}
